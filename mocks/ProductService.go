// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	product "ecommerceapi/features/product"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Add provides a mock function with given fields: token, newProduct, productImage
func (_m *ProductService) Add(token interface{}, newProduct product.Core, productImage *multipart.FileHeader) (product.Core, error) {
	ret := _m.Called(token, newProduct, productImage)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(interface{}, product.Core, *multipart.FileHeader) product.Core); ok {
		r0 = rf(token, newProduct, productImage)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, product.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, newProduct, productImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: token, productId
func (_m *ProductService) Delete(token interface{}, productId uint) error {
	ret := _m.Called(token, productId)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, productId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields:
func (_m *ProductService) GetAllProducts() ([]product.Core, error) {
	ret := _m.Called()

	var r0 []product.Core
	if rf, ok := ret.Get(0).(func() []product.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: productId
func (_m *ProductService) GetProductById(productId uint) (product.Core, error) {
	ret := _m.Called(productId)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(uint) product.Core); ok {
		r0 = rf(productId)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProducts provides a mock function with given fields: token
func (_m *ProductService) GetUserProducts(token interface{}) ([]product.Core, error) {
	ret := _m.Called(token)

	var r0 []product.Core
	if rf, ok := ret.Get(0).(func(interface{}) []product.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, productId, updProduct, productImage
func (_m *ProductService) Update(token interface{}, productId uint, updProduct product.Core, productImage *multipart.FileHeader) (product.Core, error) {
	ret := _m.Called(token, productId, updProduct, productImage)

	var r0 product.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, product.Core, *multipart.FileHeader) product.Core); ok {
		r0 = rf(token, productId, updProduct, productImage)
	} else {
		r0 = ret.Get(0).(product.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, product.Core, *multipart.FileHeader) error); ok {
		r1 = rf(token, productId, updProduct, productImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductService(t mockConstructorTestingTNewProductService) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
