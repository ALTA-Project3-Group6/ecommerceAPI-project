openapi: 3.0.3
info:
  title: E-commerce Apps
  description:  This is the API documentation for e-commerce applications created by Group 6

                Project 3, Unit 2
  version:  1.0.0
  contact:
    name: Groups 6
    email: alfianadityadwi@gmail.com
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/icxz1/E-commerceAPI/1.0.0
  - description: main url
    url: https://bluepath.my.id
    


tags:
  - name: Auth
  - name: Users
  - name: Products
  - name: Carts
  - name: Orders


paths:
  /register:
    post:
      tags:
        - "Auth"
      description: "For register new user"
      summary: "register new user"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                address:
                  type: string
                phone_number:
                  type: string
                password:
                  type: string
                  format: password
            example:
              name: "alfianadityadwi"
              email: "alfian@example.com"
              address: "Jln. Merpati No 18, Kasihan, Bantul, Yogyakarta, 55184"
              phone_number: "0812334455"
              password: "alifganteng"
      responses:
        201:
          description: "success created account"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  name: "alfianadityadwi"
                  email: "alfian@example.com"
                  address: "Jln. Merpati No 18, Kasihan, Bantul, Yogyakarta, 55184"
                  phone_number: "0812334455"
                  password: "alifganteng"
                message: "success created account"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    
  /login:
    post:
      tags:
        - "Auth"
      summary: "login account"
      description: "feature for verifying who a user is"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            example:
              email: "alfian@example.com"
              password: "alifganteng"
      responses:
        200:
          description: "success login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  id: 1
                  name: "alfianadityadwi"
                  email: "alfian@example.com"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk"
                message: "login success"
        401:
          description: "wrong password"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "wrong password"
        404:
          description: "user not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "wrong email"
        500:
          $ref: '#/components/responses/500'
      
  /users:
    get:
      tags:
        - "Users"
      summary: "show user profile"
      description: "for showing user profile"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "success show user profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  name: "alfianadityadwi"
                  email: "alfian@example.com"
                  address: "Jln. Merpati No 18, Kasihan, Bantul, Yogyakarta, 55184"
                  phone_number: "0812334455"
                  password: "alifganteng"
                  profile_photo: ""
                message: "success show profile"
        404:
          description: "account data not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "account data not found"
        500:
          $ref: '#/components/responses/500'

    put:
      tags:
        - "Users"
      summary: "update account information"
      description: "for updating account information"
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                address:
                  type: string
                phone_number:
                  type: string
                profile_photo:
                  type: string
                password:
                  type: string
                  format: password
            example:
              id: 1
              name: "alfianadityadwi"
              email: "alfian@example.com"
              address: "Jln. Merpati No 18, Kasihan, Bantul, Yogyakarta, 55184"
              phone_number: "0812334455"
              password: "alifganteng"
              profile_photo: ""
      responses:
        200:
          description: "success update profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  id: 1
                  name: "alfianadityadwi"
                  email: "alfian@example.com"
                  address: "Jln. Merpati No 18, Kasihan, Bantul, Yogyakarta, 55184"
                  phone_number: "0812334455"
                  password: "alifganteng"
                  profile_photo: ""
        404:
          description: "error insert from user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "data not found"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    delete:
      tags:
        - "Users"
      summary: "delete account"
      description: "deleting user account"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "success delete account"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "success delete account data"
        404:
          description: "ID not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "user not found"
        500:
          $ref: '#/components/responses/500'

  /products:
    post:
      tags:
        - "Products"
      summary: "add product"
      description: "user can add products"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                stock:
                  type: integer
                price:
                  type: number
                product_image:
                  type: string
            example:
              name: "Indomie goreng"
              description: "instant noodle/ramen"
              stock: 20
              price: 3500
              product_image: "indomie_goreng.png"
      responses:
        201:
          description: "success add product"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  id: 1
                  name: "Indomie goreng"
                  description: "instant noodle/ramen"
                  stock: 20
                  price: 3500
                  product_image: "indomie_goreng.png"
                  user:
                    id_user: 1
                    name: "alfian aditya"
                message: "success add product"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    get:
      tags:
        - "Products"
      summary: "Get all products"
      description: "Geta all products"
      responses:
        200:
          description: "success show all products"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObjectArr'
              example:
                data:
                  - id: 1
                    name: "Indomie goreng"
                    description: "instant noodle/ramen"
                    stock: 60
                    price: 3100
                    product_image: "indomie_goreng.png"
                    user:
                      id_user: 1
                      name: "alfian aditya"
                  - id: 2
                    name: "Pulpen Joyko"
                    description: "pulpen Joyko alat tulis sekolah maupun kantor"
                    stock: 20
                    price: 2500
                    product_image: "pulpen.png"
                    user:
                      id_user: 1
                      name: "alfian aditya"
                  - id: 3
                    name: "Samsung galaxy S23 ultra"
                    description: "smartphone flashghip terbaru dari Samsung"
                    stock: 5
                    price: 28000000
                    product_image: "samsung_s23_ultra.png"
                    user:
                      id_user: 1
                      name: "alfian aditya"
                message: "success show all products"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /products/{id_product}:
    put:
      tags:
        - "Products"
      summary: "update detail product"
      description: "updating detail product or stock"
      security:
        - JWTAuth: []
      parameters:
        - name: id_product
          description: "id product"
          required: true
          in: path
          schema:
            description: "id product"
            type: string
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                stock:
                  type: integer
                price:
                  type: number
                product_image:
                  type: string
            example:
              name: "Indomie goreng"
              description: "instant noodle/ramen"
              stock: 60
              price: 3100
              product_image: "indomie_goreng.png"
      responses:
        200:
          description: "success update detail product"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  id: 1
                  name: "Indomie goreng"
                  description: "instant noodle/ramen"
                  stock: 60
                  price: 3100
                  product_image: "indomie_goreng.png"
                message: "success update detail product"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    get:
      tags:
        - "Products"
      summary: "show detail product"
      description: "show detail product by ID product"
      parameters:
        - name: id_product
          description: "id product"
          required: true
          in: path
          schema:
            description: "id product"
            type: string
            example: 1
      responses:
        200:
          description: "success show detail product"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  name: "Indomie goreng"
                  description: "instant noodle/ramen"
                  stock: 60
                  price: 3100
                  product_image: "indomie_goreng.png"
                  user:
                    id_user: 1
                    name: "alfian aditya"
                message: "success show detail product"
        404:
          description: "wrong input"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: "product not found"
        500:
          $ref: '#/components/responses/500'

    delete:
      tags:
        - "Products"
      summary: "delete product"
      description: "deleted product by ID product"
      security:
        - JWTAuth: []
      parameters:
        - name: id_product
          description: "id product"
          required: true
          in: path
          schema:
            description: "id product"
            type: string
            example: 1
      responses:
        200:
          description: "success delete product"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                message: "success delete product"
        404:
          description: "wrong input"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: "product not found"
        500:
          $ref: '#/components/responses/500'
  
  /carts:
    post:
      tags:
        - "Carts"
      summary: "add product to cart"
      description: "adding product to cart"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_product: 
                  type: string
                quantity: 
                  type: string
            example:
              id_product: 1
              quantity: 5
      responses:
        201:
          description: "success add product to cart"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  id_product: 1
                  quantity: 5
                message: "success add product to cart"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
      
    get:
      tags:
        - "Carts"
      summary: "show all product in cart"
      description: "showing all product in cart"
      security:
        - JWTAuth: []
      responses:
        200: 
          description: "success show all product in cart"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObjectArr'
              example:
                data:
                  id: 1
                  quantity: 2
                  total_price : 20500
                  id_user: 2
                  product:
                    - id_product: 1
                      name: "indomie goreng"
                      price: 3100
                      quantity: 5
                    - id_product: 2
                      name: "pulpen Joyko"
                      price: 2500
                      quantity: 2
                message: "success show all product in cart"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    delete:
      tags:
        - "Carts"
      summary: "delete cart"
      description: "delete cart"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "success delete cart"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                message: "success delete cart"
        404:
          description: "wrong input"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: "cart not found"
        500:
          $ref: '#/components/responses/500'
  /carts/{id_cart}:
    put:
      tags:
        - "Carts"
      summary: "edit product in cart"
      description: "edit or update product in cart by ID product"
      security:
        - JWTAuth: []
      parameters:
        - name: id_cart
          description: "id cart"
          required: true
          in: path
          schema:
            description: "id cart"
            type: string
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                id_cart: 1
                quantity: 3
      responses:
        200: 
          description: "success edit product in cart"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  id_cart: 1
                  quantity: 3
                message: "success edit product in cart"
        404:
          description: "wrong input"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
              example:
                message: "cart not found"
        500:
          $ref: '#/components/responses/500'

  /orders:
    post:
      tags:
        - "Orders"
      summary: "Add order to payment gateway"
      description: "Add order to payment gateway"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                total_price:
                      type: number
                      example: 20500
                    
      responses:
        201: 
          description: "order payment created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  id: 1
                  id_buyer: 1
                  id_seller: 2
                  total_price: 20500
                  created_at: "2023-01-26T02:11:48"
                  redirect_url: "https://app.sandbox.midtrans.com/snap/v3/redirection/b95128fb-f2ef-4e57-bd89-c4a187cca536"
                  status_order: "waiting for payment"
                message: "order payment created"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    get:
      tags:
        - "Orders"
      summary: "show order history"
      description: "show order history user"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "success show order history user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  - id: 1
                    id_buyer: 2
                    buyer_name: "wildan"
                    id_seller: 2
                    seller_name: "fauzan"
                    total_price : 20500
                    created_at: "2023-01-26T02:11:48"
                    id_user: 2
                    order_status: "waiting payment"
                  - id: 2
                    id_buyer: 2
                    buyer_name: "wildan"
                    id_seller: 2
                    seller_name: "fauzan"
                    total_price : 20500
                    created_at: "2023-01-26T02:11:48"
                    id_user: 2
                    order_status: "canceled"
                message: "success show order history"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
        
  /sales:
    get:
      tags: 
        - "Orders"
      summary: "Show sales history"
      description: "Show sales history"
      security: 
        - JWTAuth: []
      responses:
        200:
          description: "Show sales history"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data:
                  - id: 1
                    id_buyer: 2
                    buyer_name: "alfian"
                    id_seller: 2
                    seller_name: "fauzan"
                    total_price : 20500
                    created_at: "2023-01-26T02:11:48"
                    id_user: 2
                    order_status: "waiting payment"
                  - id: 2
                    id_buyer: 3
                    buyer_name: "wildan"
                    id_seller: 2
                    seller_name: "fauzan"
                    total_price : 20500
                    created_at: "2023-01-26T02:11:48"
                    id_user: 2
                    order_status: "transaction success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
          
  /paymentnotification:
    post:
      tags:
        - "Orders"
      summary: "recieve payment notofication from midtrans"
      description: "recieve payment notofication from midtrans"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_order:
                      type: string
                      example: "transaction-1"
      responses:
        200:
          description: "Show order status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                message: "success handling payment notification"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /orders/{id_order}:
    put:
      tags:
        - "Orders"
      summary: "cancel order"
      description: "cancel order"
      security:
        - JWTAuth: []
      parameters:
        - name: id_order
          description: "id order"
          required: true
          in: path
          schema:
            description: "id order"
            type: string
            example: 1
      responses: 
        200:
          description: "success cancel order"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                message: "success cancel order"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

components:
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    responseObjectArr:
      type: object
      properties:
        data:
          type: array
          items: 
            type: object
        message:
          type: string
  
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user token"
  responses:
    400:
      description: "error from user"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "wrong input"
    500:
      description: "error from server"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: "server problem"